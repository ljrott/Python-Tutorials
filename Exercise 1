## Calculate the number of minutes in a week
minutes_in_week = 60*24*7

## Calculate a remainder without useing mod (%)
remainder_without_mod = 2304811 - (2304811 // 47 * 47)

## Return whether a number is divisible by three
divisible_by_3 = (673 + 909) / 3 == type(int)

## Create a conditional expression
x = -9
y = 1/2
expression_val = 2 ** (y+1/2) if x+10 < 0 else 2 ** (y-1/2)

## Set comprehension - square the values in set {1,2,3,4,5}
first_five_squares = { x**2 for x in {1,2,3,4,5} }

## Set comprehension - find the first five powers of two
first_five_pows_two = { 2**x for x in {0,1,2,3,4} }

## Double comprehension - assign two three element sets so that they evaluate to a nine-element set
X1 = { 1, 2, 3 }
Y1 = { 5, 6, 7 }

## Double comprehension evaluating to five-element set
## Assign disjoint three-element sets to X1 and Y1 so that
# {x*y for x in X1 for y in Y1} evaluates to a five-element set.
X2 = { 0.5, 1, 2 }
Y2 = { 0, -1, -0.5 }

## Set intersection as a comprehension, given:
S = {1, 2, 3, 4}
T = {3, 4, 5, 6}
# Write a one-line set comprehension that evaluates to the intersection of S and T
S_intersect_T = { x for x in S if x in T }

## Write a one line expression that evaluates to the average of a list of numbers
list_of_numbers = [20, 10, 15, 75]
list_average = sum(list_of_numbers)/ / len(list_of_numbers)

## Cartesian-product comprehension
cartesian_product = [(x,y) for x in ['A','B','C'] for y in [1,2,3]]

## Find the sum of all numbers in list of list of numbers
LofL = [[.25, .75, .1], [-1, 0], [4, 4, 4, 4]]
LofL_sum = sum([sum(x) for x in LofL])

## Find the list of all three element tuples summing to zero
S = {-4, -2, 1, 2, 5, 0}
exclude_zero_list = [(i,j,k) for i in S for j in S for k in S if i+j+k == 0]

## Find the list of all three-element tuples summing to zero, excluding one with all zeroes
S = {-4, -2, 1, 2, 5, 0}
exclude_zero_list = [(i,j,k) for i in S for j in S for k in S if i+j+k == 0 and (i,j,k) != (0,0,0)][0]









